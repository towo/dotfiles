set nocompatible " You never know on which silly vim I'll use this.
" Path definitions {{{1
if v:version >= 703 | set undodir=$XDG_CACHE_HOME/vim/undo | endif
set directory=$XDG_CACHE_HOME/vim/swap
set backupdir=$XDG_CACHE_HOME/vim/backup
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,/usr/share/vim/vimfiles/,$VIMRUNTIME
if has('viminfofile')
	set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif
" }}}
" Plugin loading {{{1
call plug#begin("$XDG_DATA_HOME/vim/plugins")
Plug 'airblade/vim-gitgutter'
Plug 'benmills/vimux'
Plug 'chikamichi/mediawiki.vim'
Plug 'chrisbra/csv.vim'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'dikiaap/minimalist'
Plug 'dhruvasagar/vim-table-mode'
" Plug 'edkolev/tmuxline.vim'
Plug 'fgsch/vim-varnish'
Plug 'jamessan/vim-gnupg'
Plug 'junegunn/vim-peekaboo'
Plug 'godlygeek/tabular'
Plug 'hashivim/vim-vagrant'
Plug 'honza/vim-snippets'
Plug 'majutsushi/tagbar'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'mrk21/yaml-vim'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', { 'do': { -> coc#util#install() }}
Plug 'pearofducks/ansible-vim'
Plug 'pedrohdz/vim-yaml-folds'
Plug 'rodjek/vim-puppet'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'stephpy/vim-yaml'
Plug 'SirVer/ultisnips'
Plug 'tmhedberg/matchit'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'vim-pandoc/vim-pandoc'
" Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-perl/vim-perl'
Plug 'vim-ruby/vim-ruby'
" Plug 'vim-syntastic/syntastic'
Plug 'vim-voom/VOoM'
Plug 'wellle/tmux-complete.vim'
" Plug 'w0rp/ale'
if v:version > 704 || v:version == 704 && has("patch1578")
	Plug 'yuttie/comfortable-motion.vim'
endif
call plug#end()
" }}}
" vim native settings {{{1
" Syntax {{{2
syntax on
filetype plugin indent on

" Omni completion per syntax
set omnifunc=syntaxcomplete#Complete
" stop vim being very slow with overlong lines
" set synmaxcol=200
"}}}
" completion settings {{{2
" Suffixes that get lower priority in tab completion
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
" Wild menu for overview purposes
set wildmenu
set wildmode=list:full
" }}}
" file handling {{{2
if !has('nvim')
set viminfo='1000,<1000,s16,h,n$XDG_CACHE_HOME/vim/viminfo " viminfo specifications
endif
set autoread " automatically reload files
" }}}
" input settings {{{2
set backspace=indent,eol,start " sane backspace behaviour

" mouse support
set mouse=nv              " allow mouse in normal + visual
set clipboard=unnamedplus " integrate yank with system clipboard
" }}}
" general appearance {{{2
set number         " Show current line number
set hlsearch       " Highlight search terms
set showmatch      " Show matching block characters when closing
set splitbelow     " Do vertical splits below
set splitright     " Do horizontal splits to the right
if v:version >= 703
	set relativenumber " Show following line numbers for movement commands
	set cursorline     " Give line with cursor a special background
	set cursorcolumn   " Give column with cursor a special background
endif
" remove some of the more annoying "Press ENTER" messages
set shortmess=astT

" screen refresh/gitgutter update time (in ms AFAIK)
set updatetime=100
" }}}
" on-screen characters {{{2
set list
set listchars=tab:»·,trail:•,extends:❯,precedes:❮
set showbreak=↪•              " show line breaks when doing visual wrapping
set fillchars=vert:\│,fold:\─ " vertical, horizontal fill character
" }}}
" content settings {{{2
" set copyindent        " try to copy indentation when adding new lines
" set preserveindent    " try to copy indentation when reindenting lines
" set breakindent       " If wrapping, wrap to indentation of previous line.
set pastetoggle=<F2>  " allow toggling paste mode with F2
" }}}
" statusline trickery {{{2
set laststatus=2  " always show status line
set showtabline=2 " always show buffer/tab line
set noshowmode
" }}}
" }}}
" Plugin settings {{{1
" airline {{{2
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
" let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#obsession#enabled = 1
" let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#ycm#enabled = 1
let g:airline_left_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_powerline_fonts = 1
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_skip_empty_sections = 1
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
let g:airline_symbols.branch = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.readonly = ''
let g:airline_theme = 'gruvbox'
"}}}
" ale {{{
" let g:ale_set_balloons = 1
" let g:ale_lint_on_insert_leave = 1
" let g:ale_lint_on_text_changed = 'normal'
" let g:ale_puppet_puppet_options = '--tasks'
" let g:ale_puppet_puppetlint_options = '--no-check_i18n-check --no-autoloader_layout-check'
" }}}
" ansible {{{2
let g:ansible_unindent_after_newline = 1
" }}}
" gist {{{2
let g:gist_token_file = "$XDG_CONFIG_HOME/gist-vim"
" }}}
" html {{{2
let g:html_indent_tags = 'p\|li\|nav' " HTML filetype indentation tags
" }}}
" NERDtree {{{2
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
" }}}
" pandoc {{{2
let g:pandoc#filetypes#handled = ['pandoc', 'markdown']
let g:pandoc#filetypes#pandoc_markdown = 1
"}}}
" syntastic {{{2
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_perl_checker = 1
" let g:syntastic_error_symbol = "✗"
" let g:syntastic_error_symbol = "✗✗"
let g:syntastic_perl_checkers = [ 'perl' ]
let g:syntastic_puppet_puppetlint_args = "--no-check_i18n-check"
" let g:syntastic_style_error_symbol = "✗"
" let g:syntastic_style_error_symbol = "✗✗"
" let g:syntastic_style_warning_symbol = "∆∆"
" let g:syntastic_style_warning_symbol = "⚠️"
" let g:syntastic_warning_symbol = "∆∆"
" let g:syntastic_warning_symbol = "⚠️"
let g:syntastic_yaml_checkers = [ 'yamllint' ]
"}}}
" ultisnips {{{
" snippets
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsListSnippets="<C-Space>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
" }}}
" vim tmux navigator {{{2
let g:tmux_navigator_no_mappings = 1
" }}}
" vimux {{{2
let g:VimuxOrientation = 'v'
let g:VimuxUseNearest = 0
" }}}
" vim-plug {{{2
let g:plug_window = '-tabnew'
let g:plug_pwindow = 'vertical rightbelow new'
" }}}
" Advanced appearance {{{1
" highlight adjustments {{{2
" Syntastic {{{3
highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn
"}}}
" colored 80char column {{{3
" Shows character of line exceeding 80 chars in special backdrop; not with all
" lines; h/t Damien Conway
highlight ColorColumn ctermfg=black ctermbg=grey
call matchadd('ColorColumn', '\%81v', 100)
" }}}
" italicize comments {{{3
" needs italics support in TE/screen manager
highlight Comment cterm=italic
" }}}
" }}}

" colors {{{2
set background=dark
set t_Co=256
let g:gruvbox_contrast_dark='high'
if filereadable(expand("$XDG_DATA_HOME/vim/plugins/gruvbox/colors/gruvbox.vim"))
	colorscheme gruvbox
endif
" }}}
" }}}
" Keymaps {{{1
" remove arrow keys for educational purposes{{{2
" not removed in insert mode, just normal/visual
noremap <up>     <nop>
noremap <down>   <nop>
noremap <left>   <nop>
noremap <right>  <nop>
noremap <BS>     <nop>
"}}}
" auto-magic search {{{2
nnoremap / /\v
vnoremap / /\v
map //  :nohlsearch<CR>; echo 'Search highlight cleared' <CR>
"}}}
" coc{{{
inoremap <silent><expr> <TAB>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<TAB>" :
	\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()
nnoremap <silent> K :call <SID>show_documentation()<CR>
" }}}
" NERDTree {{{2
map <Leader>n :NERDTreeToggle<CR>
map <Leader>N :NERDTreeFind<CR>
"}}}
" tagbar {{{2
map <Leader>t :TagbarToggle<CR>
" }}}
" force write w/ sudo {{{2
cmap w!! w !sudo sponge %
"}}}
" vim-tmux-navigator {{{2
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>
" }}}
" vimux {{{2
map <Leader>l :VimuxRunLastCommand<CR>
" }}}
"}}}
" Auto commands {{{1
" filetype matches {{{2
augroup filetypes
	autocmd BufNewFile,BufRead *.yaml            set filetype=yaml ts=2 sw=2 et
	autocmd BufNewFile,BufRead *.md              set filetype=markdown | let g:table_mode_corner='|'
	autocmd BufNewFile,BufRead *.eyaml           set filetype=yaml
	autocmd BufNewFile,BufRead */playbooks/*.yml set filetype=yaml.ansible
	autocmd BufNewFile,BufRead *.rb              set filetype=ruby ts=2 sw=2 et
	autocmd BufNewFile,BufRead *.json            set filetype=json ts=2 sw=2 et
augroup END
augroup templates
	autocmd BufNewFile *.pp 0r ~/.config/vim/templates/puppet.pp
augroup END
"}}}
" turn on/off relative number on changing window and to/from insert mode {{{2
if v:version >= 703
	:augroup numbertoggle
	:  autocmd!
	:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
	:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
	:augroup END
endif
" }}}
" }}}
" Functions {{{1
" switch relative numbers on/off on keypress {{{2
function! ToggleRelativeNumber()
	if &relativenumber
		set norelativenumber
	else
		set relativenumber
	endif
endfunction
nmap <Leader>r :call ToggleRelativeNumber()<CR>
" }}}
" Append modeline after last line in buffer. {{{2
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
	let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
	\ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
	call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" After the first call to :VimuxRunCommand, set UseNearest {{{2
function! VimuxRunCommandOnceNewPane(command)
	call VimuxRunCommand(a:command)
	let g:VimuxUseNearest = 0
endfunction
command! -nargs=1 VRun call VimuxRunCommandOnceNewPane(<f-args>)
" }}}
" Insert value and try to expand snippet from it{{{
function s:try_insert(skel)
	execute "normal! i" . a:skel . "\<C-r>=UltiSnips#ExpandSnippet()\<CR>"
	if g:ulti_expand_res == 0
		silent! undo
		return
	endif
	" enter insert mode and advance cursor (equivalent to typing `a`
	" instead of `i`)
	execute "startinsert"
	call cursor(line('.'), col('.') + 1)
	return g:ulti_expand_res
endfunction
"}}}
" Insert skeleton{{{
function! InsertSkeleton() abort
	let filename = expand('%')
	" abort on non-empty buffer or non-existant file
	if !(line('$') == 1 && getline('$') == '') || filereadable(filename)
		return
	endif
	if !empty('b:projectionist')
		" Loop through projections with 'skeleton' key and try each
		" one until the snippet expands
		for [root, value] in projectionist#query('skeleton')
			echo value
			if s:try_insert(value)
				return
			endif
		endfor
	endif
	call s:try_insert('skel')
endfunction
"}}}
" coc.nvim{{{
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1] =~# '\s'
endfunction
function! s:show_documentation()
	if &filetype == 'vim'
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction
" }}}
" }}}
" }}}
" vim: set fdm=marker :
